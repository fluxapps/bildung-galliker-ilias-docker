<?php

require_once __DIR__ . "/../vendor/autoload.php";

use fluxlabs\Plugins\IQSoftEvent\Utils\IQSoftEventTrait;
use ILIAS\DI\Container;
//use srag\CustomInputGUIs\IQSoftEvent\Loader\CustomInputGUIsLoaderDetector;
use srag\RemovePluginDataConfirm\IQSoftEvent\PluginUninstallTrait;
use fluxlabs\Plugins\IQSoftEvent\IQSoftClient\IQSoftClient;
use fluxlabs\Plugins\IQSoftEvent\IQSoftClient\Auth\AuthClient;
use fluxlabs\Plugins\IQSoftEvent\IQSoftClient\Auth\AuthClientConfigDTO;
use fluxlabs\Plugins\IQSoftEvent\Infrastructure\PluginConfigAuthTokenRepository;
use fluxlabs\Plugins\IQSoftEvent\Infrastructure\CertificateDTOBuilder;
use ILIAS\Filesystem\Exception\IOException;
use fluxlabs\Plugins\IQSoftEvent\IQSoftClient\Certificate\DocClient;
use fluxlabs\Plugins\IQSoftEvent\Config\Repository;
use fluxlabs\Plugins\IQSoftEvent\Config\Form\FormBuilder;
use fluxlabs\Plugins\IQSoftEvent\Infrastructure\ActiveRecord\FailedTransmissionAR;

/**
 * Class ilIQSoftEventPlugin
 *
 * Generated by SrPluginGenerator v2.8.1
 *
 * @author fluxlabs AG <support@fluxlabs.ch>
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 */
class ilIQSoftEventPlugin extends ilEventHookPlugin
{

    use PluginUninstallTrait;
    use IQSoftEventTrait;

    const PLUGIN_CLASS_NAME = self::class;
    const PLUGIN_ID = "iqse";
    const PLUGIN_NAME = "IQSoftEvent";
    /**
     * @var self|null
     */
    protected static $instance = null;

    /**
     * @var IQSoftClient
     */
    private $IQSoftClient;
    /**
     * @var CertificateDTOBuilder
     */
    private $certificateDTOBuilder;

    /**
     * ilIQSoftEventPlugin constructor
     */
    public function __construct()
    {
        parent::__construct();
    }


    /**
     * @return self
     */
    public static function getInstance() : self
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    private function getIQSoftClient() : IQSoftClient
    {
        if (is_null($this->IQSoftClient)) {
            $this->initServices();
        }
        return $this->IQSoftClient;
    }

    private function getCertDtoBuilder() : CertificateDTOBuilder
    {
        if (is_null($this->certificateDTOBuilder)) {
            $this->initServices();
        }
        return $this->certificateDTOBuilder;
    }

    protected function initServices()
    {
        $config = Repository::getInstance();
        $this->IQSoftClient = new IQSoftClient(
            new AuthClient(
                new AuthClientConfigDTO(
                    $config->getValue(FormBuilder::KEY_BASE_URL),
                    $config->getValue(FormBuilder::KEY_CLIENT_ID),
                    $config->getValue(FormBuilder::KEY_CLIENT_SECRET),
                    $config->getValue(FormBuilder::KEY_USERNAME),
                    $config->getValue(FormBuilder::KEY_PASSWORD)
                ),
                new PluginConfigAuthTokenRepository()
            ), new DocClient($config->getValue(FormBuilder::KEY_BASE_URL))
        );
        $this->certificateDTOBuilder = new CertificateDTOBuilder(self::dic()->filesystem());
    }

    /**
     * @param srCertificate $srCertificate
     * @return bool
     * @throws ilException
     */
    public function transmitCertificate(srCertificate $srCertificate)
    {
        self::dic()->logger()->root()->info('transmitting certificate with id ' . $srCertificate->getId() .
            ' to IQSoft..');
        try {
            $certificateDTO = $this->getCertDtoBuilder()->fromSrCertificate($srCertificate);
        } catch (Exception $e) {
            throw new ilException('could not build certificate data, message: ' . $e->getMessage(),
                $e->getCode());
        }

        try {
            $this->getIQSoftClient()->sendCertificate($certificateDTO);
        } catch (Exception $e) {
            throw new ilException('could not send certificate to IQSoft, message: ' . $e->getMessage(),
                $e->getCode());
        }

        self::dic()->logger()->root()->info('certificate with id ' . $srCertificate->getId() .
            ' successfully sent to IQSoft');
    }

    /**
     * @inheritDoc
     */
    /*public function exchangeUIRendererAfterInitialization(Container $dic) : Closure
    {
        //return CustomInputGUIsLoaderDetector::exchangeUIRendererAfterInitialization();
    }*/


    /**
     * @inheritDoc
     */
    public function getPluginName() : string
    {
        return self::PLUGIN_NAME;
    }


    /**
     * @inheritDoc
     */
    public function handleEvent(/*string*/ $a_component, /*string*/ $a_event, /*array*/ $a_parameter)/* : void*/
    {
        switch ($a_component) {
            case 'Certificate/srCertificate':
                switch ($a_event) {
                    case 'changeStatus':
                        if ($a_parameter['new_status'] === srCertificate::STATUS_PROCESSED) {
                            /** @var srCertificate $srCertificate */
                            $srCertificate = $a_parameter['object'];
                            try {
                                $this->transmitCertificate($srCertificate);
                            } catch (ilException $e) {
                                $this->handleException($e, $srCertificate->getId());
                            }
                        }
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    }

    private function handleException(Exception $e, int $certificate_id)
    {
        self::dic()->logger()->root()->error($e->getMessage());
        self::dic()->logger()->root()->error($e->getTraceAsString());
        if ($record = FailedTransmissionAR::where(['certificate_id' => $certificate_id])->first()) {
            $record->delete();
        }
        $failed_ar = new FailedTransmissionAR();
        $failed_ar->setCertificateId($certificate_id);
        $failed_ar->setErrorMsg($e->getMessage());
        $failed_ar->setStackTrace($e->getTraceAsString());
        $failed_ar->setTimestamp(time());
        $failed_ar->create();
    }


    /**
     * @inheritDoc
     */
    public function updateLanguages(/*?array*/ $a_lang_keys = null)/* : void*/
    {
        parent::updateLanguages($a_lang_keys);

        $this->installRemovePluginDataConfirmLanguages();
    }


    /**
     * @inheritDoc
     */
    protected function deleteData()/* : void*/
    {
        self::iQSoftEvent()->dropTables();
    }


    /**
     * @inheritDoc
     */
    protected function shouldUseOneUpdateStepOnly() : bool
    {
        return false;
    }
}
